===============
Модуль настроек
===============
Предназначен для использования в nodejs_, для формирования объекта допустимых
настроек процесса из файлов, переменных окружения и опций командной строки.

Подключение
===========
::

   const getopt = require('/path/to/getopt.js');

Где ``getopt`` -- это функция, которая ничего не возвращает, но бросает
исключение при ошибке формирования объекта настроек.

Аргументы
=========
::

   getopt(*object* options, *object* config, *array* args, *string* path...);

options
   Объект. Обязательный аргумент. Не меняется при использовании ``getopt``.
   Объект, определяющий допустимые настройки. Подробное описание в разделе
   options_. Хорошая практика хранения в файле, в корне проекта, например::

      const options = require('./options.json');

config
   Объект. Необязательный аргумент. Может быть заменен значением ``null``.
   Результат работы ``getopt``. Может быть пустым. Модуль заполняет его
   именованными настройками.

args
   Объект. Необязательный аргумент. Может быть заменен значением ``null``.
   Результат работы ``getopt``. Может быть пустым. Модуль заполняет его
   безымянными аргументами командной строки.

path
   Строка. Необязательный аргумент. Путь к файлу настроек. Можно использовать
   любое количество этих аргументов. В начале пути можно использовать специальные
   символы (здесь символ * обозначает любые символы):

   ``~``
      заменяется на переменную окружения ``$HOME`` (``/home/$USER/``)

   ``~/*``
      заменяется на ``$HOME*`` (``/home/$USER/*``)

   ``~+*``
      заменяется на ``$PWD*`` (``/path/to/current/dir/*``)

   ``~-*``
      заменяется на ``$OLDPWD*`` (``/path/to/old/dir/*``)

   ``~*``
      заменяется на ``/home/*``


Порядок обработки аргументов
============================
1) Сначала ``getopt`` проверяет на валидность аргумент ``options``.
2) Читает файлы аргументов ``path``, и если они содержат корректный JSON_,
   то по шаблону ``options``, проверяет их допустимость, переопределяя
   или дополняя аргумент ``config``.
3) По шаблону ``options``, выбирает переменные окружения процесса, переопределяя
   или дополняя аргумент ``config``.
4) По шаблону ``options``, проверяет именованные аргументы командной строки
   процесса, переопределяя ли дополняя аргумент ``config``, не именованные
   аргументы копирует в массив ``args``.


Формат _`options`
=================
Это объект, в котором ключи -- это имена параметров, а значения -- массив из
1-4 элементов (если элемент один, его можно не обрамлять скобками массива []),
определяющие:

   1) короткое имя параметра, для использования в командной строке;
   2) имя соответствующей переменной окружения;
   3) возможность наличия значения (есть 3-й элемент массива, непустая строка)
      или обязательность наличия значения (знак ``=`` в начале строки),
      сама строка служит подсказкой;
   4) значение по умолчанию, и является ли это значение очередью.

Проще всего объяснить формат ``options`` на примере, создать файл
``options.json``, записать в него::

   {
      "help"       :   "h?",
      "version"    :   null,
      "verbose"    :    "v",
      "debug"      : [  "d",  null, "mode", null                     ],
      "ifs"        : [ null, "IFS", "=IFS", " \t"                    ],
      "bind"       : [  "b",  null, "=URI", [ "//", "http://:1080" ] ],
      "log.url"    : [ null,  null, "=URI", [ ]                      ],
      "log.level"  : [  "L",  null, "=num", 0                        ]
   }

затем создать файл ``test.js``, записать::

   const getopt = require('./getopt');
   const options = require('./options.json')
   const config = {};
   const args = [];

   getopt(options, config, args, './config.json');

   console.log('config:', config);
   console.log('args:', args);

и проверить при разных настройках в командной строке, переменных окружения и
в файле ``./config.json``. Начать можно так::

   node test.js -d full arg1 arg2 arg3

help
   В командной строке, для присвоения этому полю значения ``true``, можно
   использовать ``-h``, ``-?``, ``--help``. Нет переменной окружения влияющей
   на эту опцию. При использовании в командной строке, ключ не может иметь
   значение. Значение по умолчанию ``false`` (это для всех строк ``options``,
   где нет 4-го аргумента). 

version
   Все как у ключа ``help``, только нет коротких ключей для командной строки,
   только ``--version``.

verbose
   Все как у ключа ``help``, только короткий вариант ключа для командной строки
   один ``-v``, длинный ключ ``--verbose``.

debug
   Значение по умолчанию ``null``. В командной строке, для присвоения этому
   полю значения ``true``, можно использовать ``-d``, ``--debug``, для
   присвоения другого значения, указать его после ключа, например::

      -d full
      -d=full
      --debug full
      --debug=full

   все это равнозначные варианты, знак ``=`` используется когда нужно указать
   отрицательное значение, например ``-d=-273``, без ``=`` строка ``-273``
   будет воспринята как короткие ключи ``-2``, ``-7`` и ``-3``, обозначение
   коротких ключей числом допустимо.

ifs
   Значение по умолчанию строка ``" \t"``. В командной строке, этот ключ должен
   иметь значение. Короткий ключ отсутствует. Длинный ключ ``--ifs``. Если
   существует переменная окружения с именем ``IFS``, то используется ее
   значение.
   Для определения значения переменной окружения, следует использовать команду:
   ``export IFS=value``. Для удаления переменной окружения команда:
   ``unset IFS``.

bind
   Короткий ключ ``-b``. Длинный ключ ``--bind``. В командной строке, этот ключ
   должен иметь значение. Значение по умолчанию -- массив строк
   ``[ "//", "http://:1080" ]``, для очистки этого массива, в командной строке
   следует использовать специальное значение ``-b -``, и далее его можно
   заполнить нужными значениями, например: ``-b //localhost:8080``.

log.url
   Все как с ключем ``bind``, только у него нет короткого ключа, длинный ключ
   в командной строке ``--log-url``, и значение по умолчанию -- пустой массив.

log.level
   Короткий ключ ``-L``, длинный ``--log-level``, значение по умолчанию ``0``,
   в командной строке ключ должен иметь значение.

Чтобы указать ``getopt``, что далее в командной строке нет ключей, а только
не именованные аргументы, следует в этом месте записать строку ``--``.

Длинный ключ для использования в командной строке для ключа из ``options``,
получается прибавлением в начале строки ``--``, и заменой точек ``.`` на ``-``.
В файле, или объекте настроек, например, ключ ``log.level`` записывается как::

   {
      "log" :
      {
         "level" : 42
      }
   }

В файле, или объекте настроек, не именованные аргументы можно записать так::

   {
      "" : [ "arg1", "arg2", "arg3" ]
   }

TODO
====
Планировалось дополнить ``options`` пятым аргументом, описанием опции, для
автоматической генерации man-страницы или печати справки, но тогда описание не
выглядит так лаконично и понятно. Давать ключам понятные имена более
рациональное решение.

.. _nodejs:   https://nodejs.org/
.. _JSON:     https://json.org/json-ru.html
